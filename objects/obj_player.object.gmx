<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_engineer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize player
globalvar boost;
globalvar boost_bar;
boost_bar = 10;
globalvar nanite_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move player

// are controllers supported om this platform?
if (gamepad_is_supported())
    {         
    // controller plugged in?
    if (gamepad_is_connected(0))                                                 
        {
        x_axis = gamepad_axis_value(0,gp_axislh)
        y_axis = gamepad_axis_value(0,gp_axislv)

        

        
        // left stick moves object
        // image_angle = point_direction(0,0,gamepad_axis_value(0,gp_axislh),-gamepad_axis_value(0,gp_axislv));
        image_angle = point_direction(0,0,gamepad_axis_value(0,gp_axislh),gamepad_axis_value(0,gp_axislv));
        
        // save image_angle; used to set the point direction of the player when player stops moving
        last_image_angle = image_angle;        

        if (gamepad_button_value(0,gp_shoulderrb) &gt; 0)
            {
            boost = gamepad_button_value(0,gp_shoulderrb) * 5;
            // if boost bar is not zero, allow player to boost
            if (boost_bar &gt; 0)
                {
                //if boost value is greater than 6, set nanite speed to a max speed boosted speed limit; prevents player from moving too fast
                if (boost &gt; 6)
                    {
                    nanite_speed = 5 * 6;
                    x += gamepad_axis_value(0,gp_axislh) * (nanite_speed);
                    y += gamepad_axis_value(0,gp_axislv) * (nanite_speed);
                    boost_bar -= 1                        
                    }
                //else allow the nanite speed to be boosted up to a boost value below 6
                else
                    {
                    nanite_speed = 5 * (boost + 1);
                    x += gamepad_axis_value(0,gp_axislh) * (nanite_speed);
                    y += gamepad_axis_value(0,gp_axislv) * (nanite_speed);
                    boost_bar -= 1
                    }
                }
            //else boost_bar is less than zero can player can not use boost
            else
                {                
                boost_bar = 0;
                nanite_speed = 5;
                x += gamepad_axis_value(0,gp_axislh) * (nanite_speed);
                y += gamepad_axis_value(0,gp_axislv) * (nanite_speed);
                }
                
            }
        else
            {
            nanite_speed = 5;
            if (boost_bar &gt;= 50)
                {
                boost_bar = 50 //set boost bar max limit
                }
            else 
                {                
                boost_bar += 0.25; //refill boost bar grandually
                }
            x += gamepad_axis_value(0,gp_axislh) * (nanite_speed);
            y += gamepad_axis_value(0,gp_axislv) * (nanite_speed);
            }
            
            
        
        // NOTE: you need to invert the y-axis
        // y -= gamepad_axis_value(0,gp_axislv)

        // if player presses the right-trigger, boost speed
        

        
        
        // left stick button resets position
        if (gamepad_button_check_pressed(0,gp_stickl))     
            {
            x = xstart;
            y = ystart;
            }
        
            
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
